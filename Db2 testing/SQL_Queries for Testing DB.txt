-- create database classicModels;
-- Show tables;


-- This is for the customers
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'customers';
SELECT column_name FROM information_schema.columns WHERE table_name = 'customers';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'customers';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'customers';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'customers';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'customers';


-- This is for the employees
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'employees';
SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'employees';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'employees';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'employees';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'employees';

-- This is for the offices
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'offices';
SELECT column_name FROM information_schema.columns WHERE table_name = 'offices';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'offices';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'offices';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'offices';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'offices';

-- This is for the orderdetails
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'orderdetails';
SELECT column_name FROM information_schema.columns WHERE table_name = 'orderdetails';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'orderdetails';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'orderdetails';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'orderdetails';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'orderdetails';


-- This is for the orders
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'orders';
SELECT column_name FROM information_schema.columns WHERE table_name = 'orders';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'orders';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'orders';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'orders';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'orders';

-- This is for the payments
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'payments';
SELECT column_name FROM information_schema.columns WHERE table_name = 'payments';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'payments';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'payments';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'payments';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'payments';

-- This is for the productlines
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'productlines';
SELECT column_name FROM information_schema.columns WHERE table_name = 'productlines';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'productlines';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'productlines';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'productlines';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'productlines';



-- This is for the products 
SELECT count(*) AS NumberOfColumns FROM information_schema.columns WHERE table_name = 'products';
SELECT column_name FROM information_schema.columns WHERE table_name = 'products';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'products';
SELECT column_name, column_type FROM information_schema.columns WHERE table_name = 'products';
SELECT column_name, is_nullable FROM information_schema.columns WHERE table_name = 'products';
SELECT column_name, column_key FROM information_schema.columns WHERE table_name = 'products';


Stored Procedures
================================================================

delimiter //

create procedure SelectAllCustomers()
Begin
    select * from customers;
End //

delimiter ;

call SelectAllCustomers();
====================================================================
DELIMITER //

CREATE PROCEDURE GetOrderStatusCounts (
    IN cust_no INT,
    OUT shipped INT,
    OUT canceled INT,
    OUT resolved INT,
    OUT disputed INT
)
BEGIN
    -- shipped
    SELECT count(*) INTO shipped FROM orders WHERE customerNumber = cust_no AND status = 'Shipped';

    -- canceled
    SELECT count(*) INTO canceled FROM orders WHERE customerNumber = cust_no AND status = 'Canceled';

    -- resolved
    SELECT count(*) INTO resolved FROM orders WHERE customerNumber = cust_no AND status = 'Resolved';

    -- disputed
    SELECT count(*) INTO disputed FROM orders WHERE customerNumber = cust_no AND status = 'Disputed';

END //

DELIMITER ;


CALL GetOrderStatusCounts(123, @shipped, @canceled, @resolved, @disputed);

-- To view the output values:
SELECT @shipped AS ShippedOrders, @canceled AS CanceledOrders, @resolved AS ResolvedOrders, @disputed AS DisputedOrders;

====================================================================
Stored Procedure for holding the information relented shipping

DELIMITER //

CREATE PROCEDURE GetCustomerShipping(
    IN pCustomerNumber INT,
    OUT pShipping VARCHAR(50)
)
BEGIN
    DECLARE customerCountry VARCHAR(100);

    -- Fetch the customer's country based on the customer number
    SELECT country INTO customerCountry 
    FROM customers 
    WHERE customerNumber = pCustomerNumber;

    -- Determine the shipping method based on the country
    CASE customerCountry
        WHEN 'USA' THEN
            SET pShipping = '2-day Shipping';
        WHEN 'Canada' THEN
            SET pShipping = '3-day Shipping';
        ELSE
            SET pShipping = '5-day Shipping';
    END CASE;
END //

DELIMITER ;

DELIMITER //

-- Declare a variable to hold the shipping information
SET @shipping = '';

-- Call the stored procedure
CALL GetCustomerShipping(112, @shipping); -- Replace 1 with the desired customer number

-- Print the shipping result
SELECT @shipping AS ShippingMethod;

DELIMITER ;
======================================================================
How to check stored procedure in the database

SHOW PROCEDURE STATUS WHERE Db = 'classicmodels';  // will show you all the procedure
SHOW PROCEDURE STATUS WHERE Name = 'your_procedure_name';  // will show you the sigle procedure
SHOW PROCEDURE STATUS WHERE Db = 'classicmodels' AND Name = 'GetCustomerShipping';  // example
SHOW PROCEDURE STATUS WHERE Db = 'classicmodels' AND Name LIKE '%get%'; // by using like operator

==================================================================================================
What is Stored Function in SQL?
Stored Procedure Vs Stored Function
How to create Stored Function?
How to call Stored Function?
Test cases for Stored Function
Automating Stored Functions  
==================================================================================================
Stored Functions 

use classicmodels;


DELIMITER //

CREATE FUNCTION CustomerLevel(credit DECIMAL(10,2)) RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
    DECLARE customerLevel VARCHAR(20);

    IF credit > 50000 THEN
        SET customerLevel = 'PLATINUM';
    ELSEIF credit >= 10000 AND credit <= 50000 THEN
        SET customerLevel = 'GOLD';
    ELSE
        SET customerLevel = 'SILVER';
    END IF;

    RETURN customerLevel;
END //

DELIMITER ;

SELECT customerName, CustomerLevel(creditLimit) FROM customers;  // to get the details

======================================================================================
Calling stored function for stored  procedure;
DELIMITER //

CREATE PROCEDURE GetCustomerLevel(
    IN customerNo INT,
    OUT customerLevel VARCHAR(20)
)
BEGIN
    DECLARE credit DEC(10,2) DEFAULT 0;

    -- Get credit limit of a customer
    SELECT creditLimit INTO credit 
    FROM customers 
    WHERE customerNumber = customerNo;

    -- Call the function
    SET customerLevel = CustomerLevel(credit);
END //

DELIMITER ;

call GetCustomerLevel(103, @customerLevel);
select @customerLevel;
// its like calling funtion inside the funtion
==============================================================================================================